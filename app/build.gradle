plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id("de.mannodermaus.android-junit5")
    id 'kotlin-parcelize'
    id("dagger.hilt.android.plugin")
}
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.unittestingkotlin"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                        "room.incremental"   : "true"]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding = true
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.4'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'

    // -------- INSTRUMENTATION TESTS (use JUnit4)
    testImplementation 'junit:junit:4.13.2'

    // AndroidX test
    def androidx_test_version = "1.1.0"
    androidTestImplementation "androidx.test:core:$androidx_test_version"
    androidTestImplementation "androidx.test:runner:$androidx_test_version"

    // Architecture components testing
    def androidx_arch_test_version = "2.1.0"
    androidTestImplementation "androidx.arch.core:core-testing:$androidx_arch_test_version"

    // Coroutine test
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.0'


    // -------- LOCAL UNIT TESTS (use JUnit5)
    // JUnit Jupiter
    def junit_jupiter_version = "5.7.1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"


    // -------- MOCKITO
    def mockito_version = "2.25.0"
    testImplementation "org.mockito:mockito-core:$mockito_version"

    // Dagger
    def dagger_version = "2.22"

    // Dagger2 core
    implementation "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"

    // Dagger Android
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"

    // Hilt
    implementation("com.google.dagger:hilt-android:$hilt_version")
    kapt("com.google.dagger:hilt-android-compiler:$hilt_version")

    def material_version = "1.0.0"
    implementation "com.google.android.material:material:$material_version"

    def room_version = "2.4.0-alpha02"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"


    // ViewModel and LiveData
    def lifecycle_version = '2.2.0'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"


    // Reactive Streams (convert Observable to LiveData)
    def reactivestreams_version = "1.1.1"
    implementation "android.arch.lifecycle:reactivestreams:$reactivestreams_version"

    // RxJava
    def rxjava_version = '2.2.9'
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"

    // RxAndroid
    def rxandroid_version = '2.1.1'
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
}